{
  "session_name": "Session 6 代码智能论坛",
  "session_chair": "论坛主席：刘乾 (Sea AI Lab 研究科学家) &nbsp;&nbsp;&nbsp;&nbsp; 刘正皓 (东北大学副教授)",
  "session_desc": "深度学习方法的一个令人兴奋的应用是程序代码的完成、修复和合成。这个领域在过去十年中受到了相当多的关注，最近自然语言处理与程序代码领域的充分融合为这个领域带来了巨大的希望。随着新的技术的出现，人工智能已经在代码相关的不同领域、任务和编程语言中发挥重大作用。代码领域的无限可能正在引起工业界和学术界的巨大兴趣。然而，我们刚刚开始探索大规模深度学习在代码方面的潜力，交流讨论代码智能最新的进展具有重大意义。本次代码智能论坛特别邀请了来自国内的四位优秀学者进行分享，他们分别从代码预训练、代码生成、代码摘要和程序合成等角度切入，呈现出代码智能领域最新的研究进展。",
  "session_time": [
    "15:50",
    "17:50"
  ],
  "session_list": [
    {
      "time": [
        "15:50",
        "16:50"
      ],
      "speaker": {
        "img": "assets/img/speakers/duannan2.png",
        "name": "段楠",
        "desc": "微软亚洲研究院首席研究员"
      },
      "type": "特邀报告",
      "title": "人工智能赋能代码智能",
      "desc": "代码智能研究旨在构建针对编程语言的人工智能模型，使其能够在软件开发不同阶段赋能软件开发人员，提高其生产力和创造力。本报告将介绍微软亚洲研究院在代码智能方向的最新研究，包括代码预训练模型、代码检索、代码生成、代码审查和代码智能基准数据集等。报告的结尾还将和大家讨论代码智能目前存在的主要挑战，以及未来可能的研究方向。"
    },
    {
      "time": [
        "16:50",
        "17:20"
      ],
      "speaker": {
        "img": "assets/img/speakers/chenbei.jpg",
        "name": "陈蓓",
        "desc": "微软亚洲研究院主管研究员"
      },
      "type": "专题报告",
      "title": "模型可以自我验证吗？探究基于测试用例生成的代码生成方法",
      "desc": "得益于预训练语言模型如Codex等的发展，我们能够为给定的编程问题自动生成代码解决方案。一般来说，预训练语言模型会生成多个不同的解决方案，而从中选择出最为准确的解决方案仍然是一个很大的挑战（例如，pass@100通常比pass@1高很多）。验证一个代码解决方案准确性最简单的方法是使用一组测试用例来执行它。然而，人工构建这样的测试用例是费时费力的。本报告旨在探索这样一个问题：预训练语言模型可以进行自我验证吗？我们提出了一个有趣的方法CodeT，它能够利用相同的预训练语言模型为代码解决方案生成多个测试用例，从而降低人工成本。CodeT将生成的多个代码解决方案在测试用例上执行，并进行双向执行一致性判断，从而挑选出最为准确的代码解决方案。我们使用5个不同大小和能力的预训练语言模型，在4个有名的代码生成数据集上做了实验。实验结果证实CodeT能够极大地提升代码生成的性能，其中CodeT将HumanEval数据集的pass@1分数提升至65.8%，比现有最高分数还要高20+%。"
    },
    {
      "time": [
        "17:20",
        "17:50"
      ],
      "speaker": {
        "img": "assets/img/speakers/wangyanlin.jpg",
        "name": "王焱林",
        "desc": "中山大学助理教授"
      },
      "type": "专题报告",
      "title": "基于深度哈希和代码分类的代码搜索加速研究",
      "desc": "代码搜索是从大型代码库中搜索出符合开发者需求的可重用代码片段，通常查询语句用自然语言来表达，一个好的代码搜索系统可以大幅提升开发者的工作效率。越来越多的研究者关注并利用深度学习解决代码搜索问题。然而，以前的方法侧重于检索的准确性，但缺乏对检索过程的效率的关注。本报告旨在探讨如何加速代码搜索过程。我们提出了一种通过深度散列和代码分类来加速代码搜索的方法CoSHC，旨在在不牺牲太多准确性的情况下执行高效的代码搜索。为了评估CoSHC的有效性，我们将其应用于五个代码搜索模型。大量的实验结果表明，与以往的代码搜索基线相比，CoSHC可以节省超过90% 的检索时间，同时保留至少 99% 的检索准确率。"
    },
    {
      "time": [
        "17:50",
        "18:20"
      ],
      "speaker": {
        "img": "assets/img/speakers/jiruyi.jpg",
        "name": "吉如一",
        "desc": "北京大学计算机学院博士生"
      },
      "type": "专题报告",
      "title": "可泛化的基于合一化的程序合成",
      "desc": "程序合成器的泛化能力指的是合成器从少量的输入输出样例中生成正确程序的能力，它是影响程序合成器在实践中的性能的一个重要因素。然而，目前程序合成领域对于合成器泛化能力的理解还十分有限。一方面，只有极少数的合成器提供了泛化能力方面的理论保证。另一方面，已有的程序合成器在一些重要问题上（例如条件线性表达式的合成）的泛化能力都不令人满意。在这一项工作中，我们基于机器学习领域的奥卡姆学习理论提出了奥卡姆合成器的的概念，并在概率近似正确性的框架中，给出了奥卡姆合成器在泛化能力上的理论保障。同时，我们在基于合一化的程序合成框架的基础上，设计了一个高效的奥卡姆合成器 PolyGen，并在条件线性表达式的合成问题上验证了其性能。实验见过表明，相比于已有的求解器，PolyGen 在求解效率和泛化能力上都有着显著的提升。"
    }
  ]
}